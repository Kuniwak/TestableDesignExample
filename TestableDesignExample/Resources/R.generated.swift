//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `octicons.ttf`.
    static let octiconsTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "octicons", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "octicons", withExtension: "ttf")`
    static func octiconsTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.octiconsTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `octicons`.
    static let octicons = Rswift.FontResource(fontName: "octicons")
    
    /// `UIFont(name: "octicons", size: ...)`
    static func octicons(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: octicons, size: size)
    }
    
    static func validate() throws {
      if R.font.octicons(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'octicons' could not be loaded, is 'octicons.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `StargazerCell`.
    static let stargazerCell = _R.nib._StargazerCell()
    /// Nib `StargazersScreenRootView`.
    static let stargazersScreenRootView = _R.nib._StargazersScreenRootView()
    /// Nib `UserScreenRootView`.
    static let userScreenRootView = _R.nib._UserScreenRootView()
    
    /// `UINib(name: "StargazerCell", in: bundle)`
    static func stargazerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stargazerCell)
    }
    
    /// `UINib(name: "StargazersScreenRootView", in: bundle)`
    static func stargazersScreenRootView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stargazersScreenRootView)
    }
    
    /// `UINib(name: "UserScreenRootView", in: bundle)`
    static func userScreenRootView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userScreenRootView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `StargazerCell`.
    static let stargazerCell: Rswift.ReuseIdentifier<StargazerCell> = Rswift.ReuseIdentifier(identifier: "StargazerCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `FatalErrorScreen`.
    static let fatalErrorScreen = _R.storyboard.fatalErrorScreen()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "FatalErrorScreen", bundle: ...)`
    static func fatalErrorScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fatalErrorScreen)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _StargazerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = StargazerCell
      
      let bundle = R.hostingBundle
      let identifier = "StargazerCell"
      let name = "StargazerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> StargazerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StargazerCell
      }
      
      fileprivate init() {}
    }
    
    struct _StargazersScreenRootView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StargazersScreenRootView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UserScreenRootView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserScreenRootView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try fatalErrorScreen.validate()
    }
    
    struct fatalErrorScreen: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let fatalErrorViewController = StoryboardViewControllerResource<FatalErrorViewController>(identifier: "FatalErrorViewController")
      let name = "FatalErrorScreen"
      
      func fatalErrorViewController(_: Void = ()) -> FatalErrorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fatalErrorViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.fatalErrorScreen().fatalErrorViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fatalErrorViewController' could not be loaded from storyboard 'FatalErrorScreen' as 'FatalErrorViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TestableDesignExample.BootstrapViewController
      
      let bootstrapViewController = StoryboardViewControllerResource<TestableDesignExample.BootstrapViewController>(identifier: "BootstrapViewController")
      let bundle = R.hostingBundle
      let name = "Main"
      
      func bootstrapViewController(_: Void = ()) -> TestableDesignExample.BootstrapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bootstrapViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().bootstrapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bootstrapViewController' could not be loaded from storyboard 'Main' as 'TestableDesignExample.BootstrapViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}